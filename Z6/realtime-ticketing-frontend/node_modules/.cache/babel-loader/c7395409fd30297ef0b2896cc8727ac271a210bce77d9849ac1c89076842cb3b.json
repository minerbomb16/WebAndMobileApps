{"ast":null,"code":"import * as signalR from \"@microsoft/signalr\";\nconst connection = new signalR.HubConnectionBuilder().withUrl(\"http://localhost:5000/realtimehub\") // Replace with your backend URL\n.withAutomaticReconnect() // Automatically reconnect\n.build();\nlet isConnectionStarted = false; // Flag to track connection state\n\nconst startConnection = async () => {\n  if (!isConnectionStarted && connection.state === \"Disconnected\") {\n    try {\n      await connection.start();\n      isConnectionStarted = true;\n      console.log(\"SignalR connected\");\n    } catch (err) {\n      console.error(\"SignalR connection failed:\", err);\n      setTimeout(startConnection, 5000); // Retry connection after 5 seconds\n    }\n  }\n};\nconnection.onclose(() => {\n  console.log(\"SignalR disconnected\");\n  isConnectionStarted = false;\n});\nexport { connection, startConnection };","map":{"version":3,"names":["signalR","connection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","isConnectionStarted","startConnection","state","start","console","log","err","error","setTimeout","onclose"],"sources":["D:/LES_L6/realtime-ticketing-frontend/src/services/signalRService.ts"],"sourcesContent":["import * as signalR from \"@microsoft/signalr\";\r\n\r\nconst connection = new signalR.HubConnectionBuilder()\r\n  .withUrl(\"http://localhost:5000/realtimehub\") // Replace with your backend URL\r\n  .withAutomaticReconnect() // Automatically reconnect\r\n  .build();\r\n\r\nlet isConnectionStarted = false; // Flag to track connection state\r\n\r\nconst startConnection = async () => {\r\n  if (!isConnectionStarted && connection.state === \"Disconnected\") {\r\n    try {\r\n      await connection.start();\r\n      isConnectionStarted = true;\r\n      console.log(\"SignalR connected\");\r\n    } catch (err) {\r\n      console.error(\"SignalR connection failed:\", err);\r\n      setTimeout(startConnection, 5000); // Retry connection after 5 seconds\r\n    }\r\n  }\r\n};\r\n\r\nconnection.onclose(() => {\r\n  console.log(\"SignalR disconnected\");\r\n  isConnectionStarted = false;\r\n});\r\n\r\nexport { connection, startConnection };\r\n"],"mappings":"AAAA,OAAO,KAAKA,OAAO,MAAM,oBAAoB;AAE7C,MAAMC,UAAU,GAAG,IAAID,OAAO,CAACE,oBAAoB,CAAC,CAAC,CAClDC,OAAO,CAAC,mCAAmC,CAAC,CAAC;AAAA,CAC7CC,sBAAsB,CAAC,CAAC,CAAC;AAAA,CACzBC,KAAK,CAAC,CAAC;AAEV,IAAIC,mBAAmB,GAAG,KAAK,CAAC,CAAC;;AAEjC,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI,CAACD,mBAAmB,IAAIL,UAAU,CAACO,KAAK,KAAK,cAAc,EAAE;IAC/D,IAAI;MACF,MAAMP,UAAU,CAACQ,KAAK,CAAC,CAAC;MACxBH,mBAAmB,GAAG,IAAI;MAC1BI,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAClC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZF,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAED,GAAG,CAAC;MAChDE,UAAU,CAACP,eAAe,EAAE,IAAI,CAAC,CAAC,CAAC;IACrC;EACF;AACF,CAAC;AAEDN,UAAU,CAACc,OAAO,CAAC,MAAM;EACvBL,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;EACnCL,mBAAmB,GAAG,KAAK;AAC7B,CAAC,CAAC;AAEF,SAASL,UAAU,EAAEM,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}