{"ast":null,"code":"var _jsxFileName = \"D:\\\\LES_L6\\\\realtime-ticketing-frontend\\\\src\\\\components\\\\TicketsList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport connection from \"../services/signalRService\";\nimport { fetchTickets } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicketsList = () => {\n  _s();\n  const [tickets, setTickets] = useState([]);\n  useEffect(() => {\n    // Pobranie istniejących zgłoszeń z backendu\n    const loadTickets = async () => {\n      const data = await fetchTickets();\n      setTickets(data);\n    };\n    loadTickets();\n\n    // Subskrypcja wydarzeń SignalR\n    connection.on(\"NewTicket\", ticket => {\n      setTickets(prev => [...prev, ticket]);\n    });\n    connection.on(\"UpdateTicket\", updatedTicket => {\n      setTickets(prev => prev.map(ticket => ticket.id === updatedTicket.id ? updatedTicket : ticket));\n    });\n\n    // Czyszczenie subskrypcji\n    return () => {\n      connection.off(\"NewTicket\");\n      connection.off(\"UpdateTicket\");\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tickets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tickets.map(ticket => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: ticket.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this), \" - \", ticket.status, \" (\", ticket.priority, \")\"]\n      }, ticket.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(TicketsList, \"54iZ51D3gm8y2vmomMR+587W7ik=\");\n_c = TicketsList;\nexport default TicketsList;\nvar _c;\n$RefreshReg$(_c, \"TicketsList\");","map":{"version":3,"names":["React","useEffect","useState","connection","fetchTickets","jsxDEV","_jsxDEV","TicketsList","_s","tickets","setTickets","loadTickets","data","on","ticket","prev","updatedTicket","map","id","off","children","fileName","_jsxFileName","lineNumber","columnNumber","title","status","priority","_c","$RefreshReg$"],"sources":["D:/LES_L6/realtime-ticketing-frontend/src/components/TicketsList.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport connection from \"../services/signalRService\";\r\nimport { fetchTickets } from \"../services/api\";\r\n\r\ninterface Ticket {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n    priority: string;\r\n    status: string;\r\n}\r\n\r\nconst TicketsList: React.FC = () => {\r\n    const [tickets, setTickets] = useState<Ticket[]>([]);\r\n\r\n    useEffect(() => {\r\n        // Pobranie istniejących zgłoszeń z backendu\r\n        const loadTickets = async () => {\r\n            const data = await fetchTickets();\r\n            setTickets(data);\r\n        };\r\n\r\n        loadTickets();\r\n\r\n        // Subskrypcja wydarzeń SignalR\r\n        connection.on(\"NewTicket\", (ticket: Ticket) => {\r\n            setTickets((prev) => [...prev, ticket]);\r\n        });\r\n\r\n        connection.on(\"UpdateTicket\", (updatedTicket: Ticket) => {\r\n            setTickets((prev) =>\r\n                prev.map((ticket) =>\r\n                    ticket.id === updatedTicket.id ? updatedTicket : ticket\r\n                )\r\n            );\r\n        });\r\n\r\n        // Czyszczenie subskrypcji\r\n        return () => {\r\n            connection.off(\"NewTicket\");\r\n            connection.off(\"UpdateTicket\");\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Tickets</h1>\r\n            <ul>\r\n                {tickets.map((ticket) => (\r\n                    <li key={ticket.id}>\r\n                        <strong>{ticket.title}</strong> - {ticket.status} ({ticket.priority})\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TicketsList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,4BAA4B;AACnD,SAASC,YAAY,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAU/C,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAW,EAAE,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,IAAI,GAAG,MAAMR,YAAY,CAAC,CAAC;MACjCM,UAAU,CAACE,IAAI,CAAC;IACpB,CAAC;IAEDD,WAAW,CAAC,CAAC;;IAEb;IACAR,UAAU,CAACU,EAAE,CAAC,WAAW,EAAGC,MAAc,IAAK;MAC3CJ,UAAU,CAAEK,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,MAAM,CAAC,CAAC;IAC3C,CAAC,CAAC;IAEFX,UAAU,CAACU,EAAE,CAAC,cAAc,EAAGG,aAAqB,IAAK;MACrDN,UAAU,CAAEK,IAAI,IACZA,IAAI,CAACE,GAAG,CAAEH,MAAM,IACZA,MAAM,CAACI,EAAE,KAAKF,aAAa,CAACE,EAAE,GAAGF,aAAa,GAAGF,MACrD,CACJ,CAAC;IACL,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACTX,UAAU,CAACgB,GAAG,CAAC,WAAW,CAAC;MAC3BhB,UAAU,CAACgB,GAAG,CAAC,cAAc,CAAC;IAClC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIb,OAAA;IAAAc,QAAA,gBACId,OAAA;MAAAc,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBlB,OAAA;MAAAc,QAAA,EACKX,OAAO,CAACQ,GAAG,CAAEH,MAAM,iBAChBR,OAAA;QAAAc,QAAA,gBACId,OAAA;UAAAc,QAAA,EAASN,MAAM,CAACW;QAAK;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,OAAG,EAACV,MAAM,CAACY,MAAM,EAAC,IAAE,EAACZ,MAAM,CAACa,QAAQ,EAAC,GACxE;MAAA,GAFSb,MAAM,CAACI,EAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEd,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAAChB,EAAA,CA5CID,WAAqB;AAAAqB,EAAA,GAArBrB,WAAqB;AA8C3B,eAAeA,WAAW;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}